
# Core tox configuration
[tox]

# A list of environments that will be run by default when running tox without specifying any environment
envlist = py38,py39,coverage,pylint,flake8,docs

# Base configuration for test environments that tox will fallback to for missing values; this avoids having to repeat the same configuration for the
# unit test environments py38 and py39 over and over again
[testenv]
setenv =
    COVERAGE_FILE = .coverage.{envname}
commands =
    uv run pytest \
        --cov "../source/corelay" \
        --cov-config "tox.ini" \
        --cov-append \
        {posargs:unit_tests}

# A test environment that combines the coverage data from all runs of the unit tests with the different Python versions and generates a single report
[testenv:coverage]
setenv =
    COVERAGE_FILE = /.coverage
depends = py38,py39
commands =
    uv run coverage combine
    uv run coverage report -m

# A test environment that will build the documentation using Sphinx
[testenv:docs]
basepython = python3.9.21
commands =
    uv run sphinx-build \
        --color \
        -W \
        --keep-going \
        -d "../docs/doctree" \
        -b html \
        "../docs/source" \
        "../docs/build" \
        {posargs}

# A test environment that will run the Flake8 meta-linter on the CoRelAy package, the unit tests, the Sphinx configuration file, and the examples
[testenv:flake8]
basepython = python3.9.21
commands =
    uv run flake8 \
        --config "linters/.flake8" \
        "../source/corelay" \
        "unit_tests" \
        "../docs/source/conf.py" \
        "../example"
        {posargs}

# A test environment that will run the PyLint linter on the CoRelAy package, the unit tests, the Sphinx configuration file, and the examples
[testenv:pylint]
basepython = python3.9.21
commands =
    uv run pylint \
        --rcfile="linters/.pylintrc" \
        --output-format="parseable" \
        "../source/corelay" \
        "unit_tests" \
        "../docs/source/conf.py" \
        "../example"

# The configuration for the PyTest test runner
[pytest]
testpaths = unit_tests
addopts = -ra -l
filterwarnings = error

# The general configuration for the PyTest coverage plugin
[coverage:run]

# Specifies that branch coverage should be measured
branch = true

# Causes the PyTest coverage plugin to append the machine name, process ID, and a random number to the data file name to simplify collecting data from
# many processes; this is done because we are running the unit tests using multiple Python versions
parallel = true

# The configuration for the PyTest coverage plugin when generating the coverage report
[coverage:report]

# Specifies that files that have 100% coverage should be omitted from the report, so that we can focus on the files that need more testing
skip_covered = true

# Specifies that the report should include a list of the lines that were not covered by the unit tests
show_missing = true

# Since the coverage data can be collected from multiple different installations of CoRelAy, the Coverage tool needs to know which files are
# equivalent; this configuration section contains named lists (in our case only a single list called "source"), where two file paths are considered
# equivalent and combined when running the "coverage combine" command when they are in the same list; here we specify that the files in directories
# called */source/corelay and */.tox/*/lib/python*/site-packages/corelay are equivalent
[coverage:paths]
source = */source/corelay,*/.tox/*/lib/python*/site-packages/corelay

